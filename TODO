logging
 config file opt
 stream setting in config

plugintester
 set up logging to log to debug stream

fix builtin plugins:
 coverage
 doctest
 prof
 isolation * post merge
   not sure how this one can be made to work at the module level, since
   import and testrunning take place separately now -- mods a, b, c are all 
   imported before tests are run in a. probably best to have it work at the
   directory and context levels -- that will get pretty close to what it
   does in 0.9

   it can be made to work only in surrounding contexts that are generators:
      hook before
      load and yield suite
      hook after
   
   needed in 2 places -- loadTestsFromDir, loadTestsFromNames. 
   So loadTestsFromNames will have to become lazy -- what impact will that
     have on unittest compatibility, etc? can it just return a lazysuite?

     the problem with loadTestsFromNames is that context teardown requires
     that for a given context, all tests within the context are known before
     teardown of the first suite within the context. Say you have a package of 
     tests, a, with subpackages a.b and a.c. User wants to run tests a.b.test 
     and a.c.test:

     nosetests a.b.test a.c.test

     'a' and 'b' setup and 'b' teardown run naturally with the 1st test
     'c' setup and teardown run natually with the 2nd test. But when, or
     how, does 'a' teardown run? If all tests are known, then a.c.test can
     run a teardown, because it knows that no more tests in 'a' are going
     to run. But if the 2 tests are loaded lazily -- as is REQUIRED for 
     the isolation plugin -- then 1st test will mistakenly run 'a' teardown, 
     since it doesn't know as it is torn down that another test in the
     same context is about to load.

     can't fix this by a call at the end of the loading process, since then
     context teardowns may interleave -- 'a' and 'b' may be present at once

     can only fix it by forcing full context load & unload around each
     test WHEN USING loadTestFromNames -- this is inefficient, but unavoidable
     without controlling the *order* of tests passed to loadTestsFromNames.

     
BUGS -- context setup/teardown

Need to develop better tests to handle the disjunct names cases, and
from those figure out how the context fixtures can work. The only
solution may be to have things in the names case do a complete context
setup and teardown around each test.


new plugin:
 testid
  -- needs loadTestsFromNames hook! for efficiency, it ought to 
  (and ought to have enough info about the tests to) reorder them and 
  organize into context suites such that the least # of context fixtures 
  are used

  How to order a batch of tests into an efficient set, knowing only the test
  names -- lazily, so that imports don't happen until they *need* to happen.

  ancestry() in suite factory shouldn't call resolve -- that should be done
  as late as possible, so it should store the name of the ancestor only,
  assuming that at the time it is resolved, the module name will be loadable
  and unique.

  resolve ancestry names in setup phase.

  convert to TestAddresses

  get the module names of each -- 
    -- what about those that don't resolve to a module (like doctest files)?

  for all that have common prefixes, organize into a suite stack from
  outer -> inner (test_pak, tesk_pak.test_sub, etc)

  yield the outermost of each suite stack, surrounded with contextStart/End 
  or whatever calls.


rename Failure and split into subclasses for Import and other, and make
it optionally include the name of the file being considered so that
Failure test logs can be more informative


* plugin methods to add

before/after Context [in suite, call with parent]
makeTest
prepareTestCase
loadTestsFromName

when result prints final result, patch in error classes, eg,

FAILED (todo=10)
  or
OK (skipped=2)

** this can only be done in nose test runner

make setup work with & w/out setuptools

fix commands module -- use Config.configure to configure

fix collector func -- configure, return loader.loadTestsFromNames()


BUGS

--exclude doesn't seem to work? in some cases?



MERGE merge trunk -> 0.10 from r9 to pick up trunk changes/fixes

...

REMOVE the context class entirely? is it doing anything that 
suite and case.Test shouldn't more properly do?

tests for:

module-level setup skip: skip all
likewise deprecated
likewise error

plugins:

plugin manager class
replace call_plugins with proxied call through plugin manager
  how to handle diff cases where plugs may short circuit on first non-None
  response or where all non-None responses are taken?

result/result proxy:

SUITES also need to proxy their results

result takes config
implements beforeTest, afterTest
result proxy should be a plugin?
what plugin hook is needed for that?

supporting result proxy in context:

 call context.prepareTest() before each test? no
 need to have a hook for context (or test case) 
 to replace/wrap the result
